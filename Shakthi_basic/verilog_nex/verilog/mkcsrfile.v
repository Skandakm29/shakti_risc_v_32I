//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Fri Apr  4 18:23:33 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// read_csr                       O    32
// RDY_read_csr                   O     1 const
// RDY_write_csr                  O     1 const
// upd_on_ret                     O    32
// RDY_upd_on_ret                 O     1 const
// upd_on_trap                    O    32
// RDY_upd_on_trap                O     1 const
// RDY_incr_minstret              O     1 const
// mv_csr_decode                  O    84
// RDY_mv_csr_decode              O     1 const
// mv_csr_misa_c                  O     1 const
// RDY_mv_csr_misa_c              O     1 const
// mv_curr_priv                   O     2 reg
// RDY_mv_curr_priv               O     1 const
// csr_mstatus                    O    32
// RDY_csr_mstatus                O     1 const
// RDY_clint_msip                 O     1 const
// RDY_clint_mtip                 O     1 const
// RDY_clint_mtime                O     1 const
// RDY_ext_interrupt              O     1 const
// mv_interrupt                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_addr                  I    12
// write_csr_addr                 I    12
// write_csr_word                 I    32
// write_csr_lpc                  I     2 unused
// upd_on_trap_cause              I     6
// upd_on_trap_pc                 I    32
// upd_on_trap_tval               I    32
// clint_msip_intrpt              I     1 reg
// clint_mtip_intrpt              I     1 reg
// clint_mtime_c_mtime            I    64 reg
// ext_interrupt_ex_i             I     1 reg
// EN_write_csr                   I     1
// EN_incr_minstret               I     1
// EN_clint_msip                  I     1
// EN_clint_mtip                  I     1
// EN_clint_mtime                 I     1
// EN_ext_interrupt               I     1
// EN_read_csr                    I     1 unused
// EN_upd_on_ret                  I     1
// EN_upd_on_trap                 I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_addr -> read_csr
//   upd_on_trap_cause -> upd_on_trap
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkcsrfile(CLK,
		 RST_N,

		 read_csr_addr,
		 EN_read_csr,
		 read_csr,
		 RDY_read_csr,

		 write_csr_addr,
		 write_csr_word,
		 write_csr_lpc,
		 EN_write_csr,
		 RDY_write_csr,

		 EN_upd_on_ret,
		 upd_on_ret,
		 RDY_upd_on_ret,

		 upd_on_trap_cause,
		 upd_on_trap_pc,
		 upd_on_trap_tval,
		 EN_upd_on_trap,
		 upd_on_trap,
		 RDY_upd_on_trap,

		 EN_incr_minstret,
		 RDY_incr_minstret,

		 mv_csr_decode,
		 RDY_mv_csr_decode,

		 mv_csr_misa_c,
		 RDY_mv_csr_misa_c,

		 mv_curr_priv,
		 RDY_mv_curr_priv,

		 csr_mstatus,
		 RDY_csr_mstatus,

		 clint_msip_intrpt,
		 EN_clint_msip,
		 RDY_clint_msip,

		 clint_mtip_intrpt,
		 EN_clint_mtip,
		 RDY_clint_mtip,

		 clint_mtime_c_mtime,
		 EN_clint_mtime,
		 RDY_clint_mtime,

		 ext_interrupt_ex_i,
		 EN_ext_interrupt,
		 RDY_ext_interrupt,

		 mv_interrupt);
  input  CLK;
  input  RST_N;

  // actionvalue method read_csr
  input  [11 : 0] read_csr_addr;
  input  EN_read_csr;
  output [31 : 0] read_csr;
  output RDY_read_csr;

  // action method write_csr
  input  [11 : 0] write_csr_addr;
  input  [31 : 0] write_csr_word;
  input  [1 : 0] write_csr_lpc;
  input  EN_write_csr;
  output RDY_write_csr;

  // actionvalue method upd_on_ret
  input  EN_upd_on_ret;
  output [31 : 0] upd_on_ret;
  output RDY_upd_on_ret;

  // actionvalue method upd_on_trap
  input  [5 : 0] upd_on_trap_cause;
  input  [31 : 0] upd_on_trap_pc;
  input  [31 : 0] upd_on_trap_tval;
  input  EN_upd_on_trap;
  output [31 : 0] upd_on_trap;
  output RDY_upd_on_trap;

  // action method incr_minstret
  input  EN_incr_minstret;
  output RDY_incr_minstret;

  // value method mv_csr_decode
  output [83 : 0] mv_csr_decode;
  output RDY_mv_csr_decode;

  // value method mv_csr_misa_c
  output mv_csr_misa_c;
  output RDY_mv_csr_misa_c;

  // value method mv_curr_priv
  output [1 : 0] mv_curr_priv;
  output RDY_mv_curr_priv;

  // value method csr_mstatus
  output [31 : 0] csr_mstatus;
  output RDY_csr_mstatus;

  // action method clint_msip
  input  clint_msip_intrpt;
  input  EN_clint_msip;
  output RDY_clint_msip;

  // action method clint_mtip
  input  clint_mtip_intrpt;
  input  EN_clint_mtip;
  output RDY_clint_mtip;

  // action method clint_mtime
  input  [63 : 0] clint_mtime_c_mtime;
  input  EN_clint_mtime;
  output RDY_clint_mtime;

  // action method ext_interrupt
  input  ext_interrupt_ex_i;
  input  EN_ext_interrupt;
  output RDY_ext_interrupt;

  // value method mv_interrupt
  output mv_interrupt;

  // signals for module outputs
  reg [31 : 0] read_csr;
  wire [83 : 0] mv_csr_decode;
  wire [31 : 0] csr_mstatus, upd_on_ret, upd_on_trap;
  wire [1 : 0] mv_curr_priv;
  wire RDY_clint_msip,
       RDY_clint_mtime,
       RDY_clint_mtip,
       RDY_csr_mstatus,
       RDY_ext_interrupt,
       RDY_incr_minstret,
       RDY_mv_csr_decode,
       RDY_mv_csr_misa_c,
       RDY_mv_curr_priv,
       RDY_read_csr,
       RDY_upd_on_ret,
       RDY_upd_on_trap,
       RDY_write_csr,
       mv_csr_misa_c,
       mv_interrupt;

  // register fflags
  reg [4 : 0] fflags;
  wire [4 : 0] fflags_D_IN;
  wire fflags_EN;

  // register frm
  reg [2 : 0] frm;
  wire [2 : 0] frm_D_IN;
  wire frm_EN;

  // register fs
  reg [1 : 0] fs;
  wire [1 : 0] fs_D_IN;
  wire fs_EN;

  // register mcycle
  reg [31 : 0] mcycle;
  wire [31 : 0] mcycle_D_IN;
  wire mcycle_EN;

  // register mcycleh
  reg [31 : 0] mcycleh;
  wire [31 : 0] mcycleh_D_IN;
  wire mcycleh_EN;

  // register minstret
  reg [31 : 0] minstret;
  wire [31 : 0] minstret_D_IN;
  wire minstret_EN;

  // register minstreth
  reg [31 : 0] minstreth;
  wire [31 : 0] minstreth_D_IN;
  wire minstreth_EN;

  // register misa_i
  reg misa_i;
  wire misa_i_D_IN, misa_i_EN;

  // register rg_clint_mtime
  reg [63 : 0] rg_clint_mtime;
  wire [63 : 0] rg_clint_mtime_D_IN;
  wire rg_clint_mtime_EN;

  // register rg_mcause
  reg [4 : 0] rg_mcause;
  wire [4 : 0] rg_mcause_D_IN;
  wire rg_mcause_EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren_D_IN;
  wire rg_mcounteren_EN;

  // register rg_meie
  reg rg_meie;
  wire rg_meie_D_IN, rg_meie_EN;

  // register rg_meip
  reg rg_meip;
  wire rg_meip_D_IN, rg_meip_EN;

  // register rg_mepc
  reg [30 : 0] rg_mepc;
  wire [30 : 0] rg_mepc_D_IN;
  wire rg_mepc_EN;

  // register rg_mie
  reg rg_mie;
  reg rg_mie_D_IN;
  wire rg_mie_EN;

  // register rg_minterrupt
  reg rg_minterrupt;
  wire rg_minterrupt_D_IN, rg_minterrupt_EN;

  // register rg_mode
  reg [1 : 0] rg_mode;
  wire [1 : 0] rg_mode_D_IN;
  wire rg_mode_EN;

  // register rg_mpie
  reg rg_mpie;
  reg rg_mpie_D_IN;
  wire rg_mpie_EN;

  // register rg_mpp
  reg [1 : 0] rg_mpp;
  reg [1 : 0] rg_mpp_D_IN;
  wire rg_mpp_EN;

  // register rg_mprv
  reg rg_mprv;
  wire rg_mprv_D_IN, rg_mprv_EN;

  // register rg_mscratch
  reg [31 : 0] rg_mscratch;
  wire [31 : 0] rg_mscratch_D_IN;
  wire rg_mscratch_EN;

  // register rg_msie
  reg rg_msie;
  wire rg_msie_D_IN, rg_msie_EN;

  // register rg_msip
  reg rg_msip;
  wire rg_msip_D_IN, rg_msip_EN;

  // register rg_mtie
  reg rg_mtie;
  wire rg_mtie_D_IN, rg_mtie_EN;

  // register rg_mtip
  reg rg_mtip;
  wire rg_mtip_D_IN, rg_mtip_EN;

  // register rg_mtval
  reg [31 : 0] rg_mtval;
  wire [31 : 0] rg_mtval_D_IN;
  wire rg_mtval_EN;

  // register rg_mtvec
  reg [29 : 0] rg_mtvec;
  wire [29 : 0] rg_mtvec_D_IN;
  wire rg_mtvec_EN;

  // register rg_prv
  reg [1 : 0] rg_prv;
  wire [1 : 0] rg_prv_D_IN;
  wire rg_prv_EN;

  // register rg_ueie
  reg rg_ueie;
  wire rg_ueie_D_IN, rg_ueie_EN;

  // register rg_uie
  reg rg_uie;
  wire rg_uie_D_IN, rg_uie_EN;

  // register rg_upie
  reg rg_upie;
  wire rg_upie_D_IN, rg_upie_EN;

  // register rg_uscratch
  reg [31 : 0] rg_uscratch;
  wire [31 : 0] rg_uscratch_D_IN;
  wire rg_uscratch_EN;

  // register rg_usie
  reg rg_usie;
  wire rg_usie_D_IN, rg_usie_EN;

  // register rg_utie
  reg rg_utie;
  wire rg_utie_D_IN, rg_utie_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_increment_cycle_counter,
       CAN_FIRE_clint_msip,
       CAN_FIRE_clint_mtime,
       CAN_FIRE_clint_mtip,
       CAN_FIRE_ext_interrupt,
       CAN_FIRE_incr_minstret,
       CAN_FIRE_read_csr,
       CAN_FIRE_upd_on_ret,
       CAN_FIRE_upd_on_trap,
       CAN_FIRE_write_csr,
       WILL_FIRE_RL_increment_cycle_counter,
       WILL_FIRE_clint_msip,
       WILL_FIRE_clint_mtime,
       WILL_FIRE_clint_mtip,
       WILL_FIRE_ext_interrupt,
       WILL_FIRE_incr_minstret,
       WILL_FIRE_read_csr,
       WILL_FIRE_upd_on_ret,
       WILL_FIRE_upd_on_trap,
       WILL_FIRE_write_csr;

  // inputs to muxes for submodule ports
  wire MUX_mcycle_write_1__SEL_1,
       MUX_mcycleh_write_1__SEL_1,
       MUX_minstret_write_1__SEL_1,
       MUX_minstreth_write_1__SEL_1,
       MUX_rg_mcause_write_1__SEL_1,
       MUX_rg_mepc_write_1__SEL_1,
       MUX_rg_mie_write_1__SEL_1,
       MUX_rg_mpp_write_1__SEL_1,
       MUX_rg_mtval_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d7;
  reg TASK_testplusargs___d8;
  reg TASK_testplusargs___d9;
  reg [63 : 0] v__h1401;
  reg TASK_testplusargs___d13;
  reg TASK_testplusargs___d14;
  reg TASK_testplusargs___d15;
  reg [63 : 0] v__h1543;
  reg TASK_testplusargs___d122;
  reg TASK_testplusargs___d123;
  reg TASK_testplusargs___d124;
  reg [63 : 0] v__h2042;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] instr__h3922,
		instr__h3923,
		mcycleh_CONCAT_mcycle_PLUS_1___d4,
		new_cycle__h1177;
  wire [31 : 0] _theResult_____2__h1476,
		data___1__h1613,
		data___1__h1620,
		data___1__h1625,
		data___1__h1656,
		data___1__h1662,
		data___1__h1676,
		data___1__h1690,
		data___1__h1715,
		data___1__h1746,
		data___1__h1790;
  wire [30 : 0] result__h3579;
  wire [29 : 0] IF_rg_mode_1_EQ_1_53_AND_upd_on_trap_cause_BIT_ETC___d257;
  wire [25 : 0] misa__h106;
  wire [11 : 0] x__h3991, x__h4123;
  wire [7 : 0] x__h1616;
  wire r__h1749,
       write_csr_addr_EQ_0x1_62_AND_NOT_fflags_2_EQ_w_ETC___d180,
       write_csr_addr_EQ_0x2_68_AND_NOT_frm_1_EQ_writ_ETC___d178;

  // actionvalue method read_csr
  always@(read_csr_addr or
	  data___1__h1625 or
	  data___1__h1620 or
	  data___1__h1613 or
	  data___1__h1746 or
	  misa_i or
	  data___1__h1715 or
	  data___1__h1790 or
	  data___1__h1656 or
	  rg_mscratch or
	  data___1__h1676 or
	  data___1__h1662 or
	  rg_mtval or
	  data___1__h1690 or
	  mcycle or rg_clint_mtime or minstret or mcycleh or minstreth)
  begin
    case (read_csr_addr)
      12'h001: read_csr = data___1__h1625;
      12'h002: read_csr = data___1__h1620;
      12'h003: read_csr = data___1__h1613;
      12'h300: read_csr = data___1__h1746;
      12'h301: read_csr = { 23'd2097664, misa_i, 8'd0 };
      12'h304: read_csr = data___1__h1715;
      12'h305: read_csr = data___1__h1790;
      12'h306: read_csr = data___1__h1656;
      12'h340: read_csr = rg_mscratch;
      12'h341: read_csr = data___1__h1676;
      12'h342: read_csr = data___1__h1662;
      12'h343: read_csr = rg_mtval;
      12'h344: read_csr = data___1__h1690;
      12'h800: read_csr = 32'd0;
      12'hB00, 12'hC00: read_csr = mcycle;
      12'hB01, 12'hC01: read_csr = rg_clint_mtime[31:0];
      12'hB02, 12'hC02: read_csr = minstret;
      12'hB80, 12'hC80: read_csr = mcycleh;
      12'hB81: read_csr = rg_clint_mtime[63:32];
      12'hB82, 12'hC82: read_csr = minstreth;
      default: read_csr = 32'd0;
    endcase
  end
  assign RDY_read_csr = 1'd1 ;
  assign CAN_FIRE_read_csr = 1'd1 ;
  assign WILL_FIRE_read_csr = EN_read_csr ;

  // action method write_csr
  assign RDY_write_csr = 1'd1 ;
  assign CAN_FIRE_write_csr = 1'd1 ;
  assign WILL_FIRE_write_csr = EN_write_csr ;

  // actionvalue method upd_on_ret
  assign upd_on_ret = { result__h3579, 1'b0 } ;
  assign RDY_upd_on_ret = 1'd1 ;
  assign CAN_FIRE_upd_on_ret = 1'd1 ;
  assign WILL_FIRE_upd_on_ret = EN_upd_on_ret ;

  // actionvalue method upd_on_trap
  assign upd_on_trap =
	     { IF_rg_mode_1_EQ_1_53_AND_upd_on_trap_cause_BIT_ETC___d257,
	       2'b0 } ;
  assign RDY_upd_on_trap = 1'd1 ;
  assign CAN_FIRE_upd_on_trap = 1'd1 ;
  assign WILL_FIRE_upd_on_trap = EN_upd_on_trap ;

  // action method incr_minstret
  assign RDY_incr_minstret = 1'd1 ;
  assign CAN_FIRE_incr_minstret = 1'd1 ;
  assign WILL_FIRE_incr_minstret = EN_incr_minstret ;

  // value method mv_csr_decode
  assign mv_csr_decode =
	     { rg_prv,
	       rg_meip,
	       3'd0,
	       rg_mtip,
	       3'd0,
	       rg_msip,
	       3'd0,
	       x__h3991,
	       misa__h106,
	       data___1__h1746 } ;
  assign RDY_mv_csr_decode = 1'd1 ;

  // value method mv_csr_misa_c
  assign mv_csr_misa_c = 1'd0 ;
  assign RDY_mv_csr_misa_c = 1'd1 ;

  // value method mv_curr_priv
  assign mv_curr_priv = rg_prv ;
  assign RDY_mv_curr_priv = 1'd1 ;

  // value method csr_mstatus
  assign csr_mstatus =
	     { r__h1749,
	       13'd0,
	       rg_mprv,
	       2'd0,
	       fs,
	       rg_mpp,
	       3'd0,
	       rg_mpie,
	       2'd0,
	       rg_upie,
	       rg_mie,
	       2'd0,
	       rg_uie } ;
  assign RDY_csr_mstatus = 1'd1 ;

  // action method clint_msip
  assign RDY_clint_msip = 1'd1 ;
  assign CAN_FIRE_clint_msip = 1'd1 ;
  assign WILL_FIRE_clint_msip = EN_clint_msip ;

  // action method clint_mtip
  assign RDY_clint_mtip = 1'd1 ;
  assign CAN_FIRE_clint_mtip = 1'd1 ;
  assign WILL_FIRE_clint_mtip = EN_clint_mtip ;

  // action method clint_mtime
  assign RDY_clint_mtime = 1'd1 ;
  assign CAN_FIRE_clint_mtime = 1'd1 ;
  assign WILL_FIRE_clint_mtime = EN_clint_mtime ;

  // action method ext_interrupt
  assign RDY_ext_interrupt = 1'd1 ;
  assign CAN_FIRE_ext_interrupt = 1'd1 ;
  assign WILL_FIRE_ext_interrupt = EN_ext_interrupt ;

  // value method mv_interrupt
  assign mv_interrupt = x__h4123 != 12'd0 ;

  // rule RL_increment_cycle_counter
  assign CAN_FIRE_RL_increment_cycle_counter = 1'd1 ;
  assign WILL_FIRE_RL_increment_cycle_counter = !EN_write_csr ;

  // inputs to muxes for submodule ports
  assign MUX_mcycle_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB00 ;
  assign MUX_mcycleh_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB80 ;
  assign MUX_minstret_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB02 ;
  assign MUX_minstreth_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'hB82 ;
  assign MUX_rg_mcause_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h342 ;
  assign MUX_rg_mepc_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h341 ;
  assign MUX_rg_mie_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h300 ;
  assign MUX_rg_mpp_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h300 &&
	     (write_csr_word[12:11] == 2'd3 ||
	      write_csr_word[12:11] == 2'd1) ;
  assign MUX_rg_mtval_write_1__SEL_1 =
	     EN_write_csr && write_csr_addr == 12'h343 ;

  // register fflags
  assign fflags_D_IN = write_csr_word[4:0] ;
  assign fflags_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h001 || write_csr_addr == 12'h003) ;

  // register frm
  assign frm_D_IN =
	     (write_csr_addr == 12'h002) ?
	       write_csr_word[2:0] :
	       write_csr_word[7:5] ;
  assign frm_EN =
	     EN_write_csr &&
	     (write_csr_addr == 12'h002 || write_csr_addr == 12'h003) ;

  // register fs
  assign fs_D_IN =
	     (write_csr_addr == 12'h300) ? write_csr_word[14:13] : 2'b11 ;
  assign fs_EN =
	     EN_write_csr && write_csr_addr != 12'h301 &&
	     write_csr_addr != 12'h305 &&
	     (write_csr_addr == 12'h300 ||
	      write_csr_addr != 12'h304 && write_csr_addr != 12'h344 &&
	      write_csr_addr != 12'hB00 &&
	      write_csr_addr != 12'hB02 &&
	      write_csr_addr != 12'hB80 &&
	      write_csr_addr != 12'hB82 &&
	      write_csr_addr != 12'h341 &&
	      write_csr_addr != 12'h343 &&
	      write_csr_addr != 12'h340 &&
	      write_csr_addr != 12'h342 &&
	      write_csr_addr != 12'h306 &&
	      write_csr_addr != 12'h040 &&
	      write_csr_addr_EQ_0x1_62_AND_NOT_fflags_2_EQ_w_ETC___d180) ;

  // register mcycle
  assign mcycle_D_IN =
	     MUX_mcycle_write_1__SEL_1 ?
	       write_csr_word :
	       mcycleh_CONCAT_mcycle_PLUS_1___d4[31:0] ;
  assign mcycle_EN =
	     EN_write_csr && write_csr_addr == 12'hB00 ||
	     WILL_FIRE_RL_increment_cycle_counter ;

  // register mcycleh
  assign mcycleh_D_IN =
	     MUX_mcycleh_write_1__SEL_1 ?
	       write_csr_word :
	       mcycleh_CONCAT_mcycle_PLUS_1___d4[63:32] ;
  assign mcycleh_EN =
	     EN_write_csr && write_csr_addr == 12'hB80 ||
	     WILL_FIRE_RL_increment_cycle_counter ;

  // register minstret
  assign minstret_D_IN =
	     MUX_minstret_write_1__SEL_1 ?
	       write_csr_word :
	       instr__h3923[31:0] ;
  assign minstret_EN =
	     EN_write_csr && write_csr_addr == 12'hB02 || EN_incr_minstret ;

  // register minstreth
  assign minstreth_D_IN =
	     MUX_minstreth_write_1__SEL_1 ?
	       write_csr_word :
	       instr__h3923[63:32] ;
  assign minstreth_EN =
	     EN_write_csr && write_csr_addr == 12'hB82 || EN_incr_minstret ;

  // register misa_i
  assign misa_i_D_IN = write_csr_word[8] ;
  assign misa_i_EN = EN_write_csr && write_csr_addr == 12'h301 ;

  // register rg_clint_mtime
  assign rg_clint_mtime_D_IN = clint_mtime_c_mtime ;
  assign rg_clint_mtime_EN = EN_clint_mtime ;

  // register rg_mcause
  assign rg_mcause_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       write_csr_word[4:0] :
	       upd_on_trap_cause[4:0] ;
  assign rg_mcause_EN =
	     EN_write_csr && write_csr_addr == 12'h342 || EN_upd_on_trap ;

  // register rg_mcounteren
  assign rg_mcounteren_D_IN = write_csr_word[2:0] ;
  assign rg_mcounteren_EN = EN_write_csr && write_csr_addr == 12'h306 ;

  // register rg_meie
  assign rg_meie_D_IN = write_csr_word[11] ;
  assign rg_meie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_meip
  assign rg_meip_D_IN = ext_interrupt_ex_i ;
  assign rg_meip_EN = EN_ext_interrupt && rg_prv == 2'd3 ;

  // register rg_mepc
  assign rg_mepc_D_IN =
	     MUX_rg_mepc_write_1__SEL_1 ?
	       write_csr_word[31:1] :
	       upd_on_trap_pc[31:1] ;
  assign rg_mepc_EN =
	     EN_write_csr && write_csr_addr == 12'h341 || EN_upd_on_trap ;

  // register rg_mie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  write_csr_word or EN_upd_on_ret or rg_mpie or EN_upd_on_trap)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mie_D_IN = write_csr_word[3];
      EN_upd_on_ret: rg_mie_D_IN = rg_mpie;
      EN_upd_on_trap: rg_mie_D_IN = 1'd0;
      default: rg_mie_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_mie_EN =
	     EN_write_csr && write_csr_addr == 12'h300 || EN_upd_on_ret ||
	     EN_upd_on_trap ;

  // register rg_minterrupt
  assign rg_minterrupt_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       write_csr_word[31] :
	       upd_on_trap_cause[5] ;
  assign rg_minterrupt_EN =
	     EN_write_csr && write_csr_addr == 12'h342 || EN_upd_on_trap ;

  // register rg_mode
  assign rg_mode_D_IN = write_csr_word[1:0] ;
  assign rg_mode_EN =
	     EN_write_csr && write_csr_addr == 12'h305 &&
	     write_csr_word[1:0] < 2'd2 ;

  // register rg_mpie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  write_csr_word or EN_upd_on_trap or rg_mie or EN_upd_on_ret)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mpie_D_IN = write_csr_word[7];
      EN_upd_on_trap: rg_mpie_D_IN = rg_mie;
      EN_upd_on_ret: rg_mpie_D_IN = 1'd1;
      default: rg_mpie_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_mpie_EN =
	     EN_write_csr && write_csr_addr == 12'h300 || EN_upd_on_trap ||
	     EN_upd_on_ret ;

  // register rg_mpp
  always@(MUX_rg_mpp_write_1__SEL_1 or
	  write_csr_word or EN_upd_on_trap or rg_prv or EN_upd_on_ret)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mpp_write_1__SEL_1: rg_mpp_D_IN = write_csr_word[12:11];
      EN_upd_on_trap: rg_mpp_D_IN = rg_prv;
      EN_upd_on_ret: rg_mpp_D_IN = 2'd0;
      default: rg_mpp_D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_mpp_EN =
	     EN_write_csr && write_csr_addr == 12'h300 &&
	     (write_csr_word[12:11] == 2'd3 ||
	      write_csr_word[12:11] == 2'd1) ||
	     EN_upd_on_trap ||
	     EN_upd_on_ret ;

  // register rg_mprv
  assign rg_mprv_D_IN = write_csr_word[17] ;
  assign rg_mprv_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_mscratch
  assign rg_mscratch_D_IN = write_csr_word ;
  assign rg_mscratch_EN = EN_write_csr && write_csr_addr == 12'h340 ;

  // register rg_msie
  assign rg_msie_D_IN = write_csr_word[3] ;
  assign rg_msie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_msip
  assign rg_msip_D_IN = clint_msip_intrpt ;
  assign rg_msip_EN = EN_clint_msip ;

  // register rg_mtie
  assign rg_mtie_D_IN = write_csr_word[7] ;
  assign rg_mtie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_mtip
  assign rg_mtip_D_IN = clint_mtip_intrpt ;
  assign rg_mtip_EN = EN_clint_mtip ;

  // register rg_mtval
  assign rg_mtval_D_IN =
	     MUX_rg_mtval_write_1__SEL_1 ? write_csr_word : upd_on_trap_tval ;
  assign rg_mtval_EN =
	     EN_write_csr && write_csr_addr == 12'h343 || EN_upd_on_trap ;

  // register rg_mtvec
  assign rg_mtvec_D_IN = write_csr_word[31:2] ;
  assign rg_mtvec_EN = EN_write_csr && write_csr_addr == 12'h305 ;

  // register rg_prv
  assign rg_prv_D_IN = EN_upd_on_ret ? rg_mpp : 2'd3 ;
  assign rg_prv_EN = EN_upd_on_ret || EN_upd_on_trap ;

  // register rg_ueie
  assign rg_ueie_D_IN = write_csr_word[8] ;
  assign rg_ueie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_uie
  assign rg_uie_D_IN = write_csr_word[0] ;
  assign rg_uie_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_upie
  assign rg_upie_D_IN = write_csr_word[4] ;
  assign rg_upie_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_uscratch
  assign rg_uscratch_D_IN = write_csr_word ;
  assign rg_uscratch_EN = EN_write_csr && write_csr_addr == 12'h040 ;

  // register rg_usie
  assign rg_usie_D_IN = write_csr_word[0] ;
  assign rg_usie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // register rg_utie
  assign rg_utie_D_IN = write_csr_word[4] ;
  assign rg_utie_EN = EN_write_csr && write_csr_addr == 12'h304 ;

  // remaining internal signals
  assign IF_rg_mode_1_EQ_1_53_AND_upd_on_trap_cause_BIT_ETC___d257 =
	     (rg_mode == 2'd1 && upd_on_trap_cause[5]) ?
	       rg_mtvec + { 25'd0, upd_on_trap_cause[4:0] } :
	       rg_mtvec ;
  assign _theResult_____2__h1476 = read_csr ;
  assign data___1__h1613 = { 24'd0, x__h1616 } ;
  assign data___1__h1620 = { 29'd0, frm } ;
  assign data___1__h1625 = { 27'd0, fflags } ;
  assign data___1__h1656 = { 29'd0, rg_mcounteren } ;
  assign data___1__h1662 = { rg_minterrupt, 26'd0, rg_mcause } ;
  assign data___1__h1676 = { rg_mepc, 1'b0 } ;
  assign data___1__h1690 =
	     { 20'd0, rg_meip, 3'd0, rg_mtip, 3'd0, rg_msip, 3'd0 } ;
  assign data___1__h1715 =
	     { 20'd0, rg_meie, 3'd0, rg_mtie, 3'd0, rg_msie, 3'd0 } ;
  assign data___1__h1746 = csr_mstatus ;
  assign data___1__h1790 = { rg_mtvec, rg_mode } ;
  assign instr__h3922 = { minstreth, minstret } ;
  assign instr__h3923 = instr__h3922 + 64'd1 ;
  assign mcycleh_CONCAT_mcycle_PLUS_1___d4 = new_cycle__h1177 + 64'd1 ;
  assign misa__h106 = { 17'd512, misa_i, 8'd0 } ;
  assign new_cycle__h1177 = { mcycleh, mcycle } ;
  assign r__h1749 = fs == 2'b11 ;
  assign result__h3579 = { rg_mepc[30:1], 1'd0 } ;
  assign write_csr_addr_EQ_0x1_62_AND_NOT_fflags_2_EQ_w_ETC___d180 =
	     write_csr_addr == 12'h001 && fflags != write_csr_word[4:0] ||
	     write_csr_addr != 12'h001 &&
	     write_csr_addr_EQ_0x2_68_AND_NOT_frm_1_EQ_writ_ETC___d178 ;
  assign write_csr_addr_EQ_0x2_68_AND_NOT_frm_1_EQ_writ_ETC___d178 =
	     write_csr_addr == 12'h002 && frm != write_csr_word[2:0] ||
	     write_csr_addr == 12'h003 && x__h1616 != write_csr_word[7:0] ;
  assign x__h1616 = { frm, fflags } ;
  assign x__h3991 =
	     { rg_meie,
	       2'd0,
	       rg_ueie,
	       rg_mtie,
	       2'd0,
	       rg_utie,
	       rg_msie,
	       2'd0,
	       rg_usie } ;
  assign x__h4123 =
	     { rg_meie & rg_meip,
	       3'd0,
	       rg_mtie & rg_mtip,
	       3'd0,
	       rg_msie & rg_msip,
	       3'd0 } ;

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      fflags <= `BSV_ASSIGNMENT_DELAY 5'd0;
      frm <= `BSV_ASSIGNMENT_DELAY 3'd0;
      fs <= `BSV_ASSIGNMENT_DELAY 2'd0;
      mcycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
      mcycleh <= `BSV_ASSIGNMENT_DELAY 32'd0;
      minstret <= `BSV_ASSIGNMENT_DELAY 32'd0;
      minstreth <= `BSV_ASSIGNMENT_DELAY 32'd0;
      misa_i <= `BSV_ASSIGNMENT_DELAY 1'd1;
      rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY 64'd0;
      rg_mcause <= `BSV_ASSIGNMENT_DELAY 5'd0;
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY 3'd0;
      rg_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_meip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mepc <= `BSV_ASSIGNMENT_DELAY 31'd0;
      rg_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_minterrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
      rg_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mpp <= `BSV_ASSIGNMENT_DELAY 2'b0;
      rg_mprv <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
      rg_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_msip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_mtval <= `BSV_ASSIGNMENT_DELAY 32'd0;
      rg_mtvec <= `BSV_ASSIGNMENT_DELAY 30'd0;
      rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
      rg_ueie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_uie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_upie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_uscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
      rg_usie <= `BSV_ASSIGNMENT_DELAY 1'd0;
      rg_utie <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (fflags_EN) fflags <= `BSV_ASSIGNMENT_DELAY fflags_D_IN;
      if (frm_EN) frm <= `BSV_ASSIGNMENT_DELAY frm_D_IN;
      if (fs_EN) fs <= `BSV_ASSIGNMENT_DELAY fs_D_IN;
      if (mcycle_EN) mcycle <= `BSV_ASSIGNMENT_DELAY mcycle_D_IN;
      if (mcycleh_EN) mcycleh <= `BSV_ASSIGNMENT_DELAY mcycleh_D_IN;
      if (minstret_EN) minstret <= `BSV_ASSIGNMENT_DELAY minstret_D_IN;
      if (minstreth_EN) minstreth <= `BSV_ASSIGNMENT_DELAY minstreth_D_IN;
      if (misa_i_EN) misa_i <= `BSV_ASSIGNMENT_DELAY misa_i_D_IN;
      if (rg_clint_mtime_EN)
	rg_clint_mtime <= `BSV_ASSIGNMENT_DELAY rg_clint_mtime_D_IN;
      if (rg_mcause_EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause_D_IN;
      if (rg_mcounteren_EN)
	rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren_D_IN;
      if (rg_meie_EN) rg_meie <= `BSV_ASSIGNMENT_DELAY rg_meie_D_IN;
      if (rg_meip_EN) rg_meip <= `BSV_ASSIGNMENT_DELAY rg_meip_D_IN;
      if (rg_mepc_EN) rg_mepc <= `BSV_ASSIGNMENT_DELAY rg_mepc_D_IN;
      if (rg_mie_EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie_D_IN;
      if (rg_minterrupt_EN)
	rg_minterrupt <= `BSV_ASSIGNMENT_DELAY rg_minterrupt_D_IN;
      if (rg_mode_EN) rg_mode <= `BSV_ASSIGNMENT_DELAY rg_mode_D_IN;
      if (rg_mpie_EN) rg_mpie <= `BSV_ASSIGNMENT_DELAY rg_mpie_D_IN;
      if (rg_mpp_EN) rg_mpp <= `BSV_ASSIGNMENT_DELAY rg_mpp_D_IN;
      if (rg_mprv_EN) rg_mprv <= `BSV_ASSIGNMENT_DELAY rg_mprv_D_IN;
      if (rg_mscratch_EN)
	rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch_D_IN;
      if (rg_msie_EN) rg_msie <= `BSV_ASSIGNMENT_DELAY rg_msie_D_IN;
      if (rg_msip_EN) rg_msip <= `BSV_ASSIGNMENT_DELAY rg_msip_D_IN;
      if (rg_mtie_EN) rg_mtie <= `BSV_ASSIGNMENT_DELAY rg_mtie_D_IN;
      if (rg_mtip_EN) rg_mtip <= `BSV_ASSIGNMENT_DELAY rg_mtip_D_IN;
      if (rg_mtval_EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval_D_IN;
      if (rg_mtvec_EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec_D_IN;
      if (rg_prv_EN) rg_prv <= `BSV_ASSIGNMENT_DELAY rg_prv_D_IN;
      if (rg_ueie_EN) rg_ueie <= `BSV_ASSIGNMENT_DELAY rg_ueie_D_IN;
      if (rg_uie_EN) rg_uie <= `BSV_ASSIGNMENT_DELAY rg_uie_D_IN;
      if (rg_upie_EN) rg_upie <= `BSV_ASSIGNMENT_DELAY rg_upie_D_IN;
      if (rg_uscratch_EN)
	rg_uscratch <= `BSV_ASSIGNMENT_DELAY rg_uscratch_D_IN;
      if (rg_usie_EN) rg_usie <= `BSV_ASSIGNMENT_DELAY rg_usie_D_IN;
      if (rg_utie_EN) rg_utie <= `BSV_ASSIGNMENT_DELAY rg_utie_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fflags = 5'h0A;
    frm = 3'h2;
    fs = 2'h2;
    mcycle = 32'hAAAAAAAA;
    mcycleh = 32'hAAAAAAAA;
    minstret = 32'hAAAAAAAA;
    minstreth = 32'hAAAAAAAA;
    misa_i = 1'h0;
    rg_clint_mtime = 64'hAAAAAAAAAAAAAAAA;
    rg_mcause = 5'h0A;
    rg_mcounteren = 3'h2;
    rg_meie = 1'h0;
    rg_meip = 1'h0;
    rg_mepc = 31'h2AAAAAAA;
    rg_mie = 1'h0;
    rg_minterrupt = 1'h0;
    rg_mode = 2'h2;
    rg_mpie = 1'h0;
    rg_mpp = 2'h2;
    rg_mprv = 1'h0;
    rg_mscratch = 32'hAAAAAAAA;
    rg_msie = 1'h0;
    rg_msip = 1'h0;
    rg_mtie = 1'h0;
    rg_mtip = 1'h0;
    rg_mtval = 32'hAAAAAAAA;
    rg_mtvec = 30'h2AAAAAAA;
    rg_prv = 2'h2;
    rg_ueie = 1'h0;
    rg_uie = 1'h0;
    rg_upie = 1'h0;
    rg_uscratch = 32'hAAAAAAAA;
    rg_usie = 1'h0;
    rg_utie = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d7 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d8 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  v__h1401 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d7 ||
	   TASK_testplusargs___d8 && TASK_testplusargs___d9))
	$write("[%10d", v__h1401, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d7 ||
	   TASK_testplusargs___d8 && TASK_testplusargs___d9))
	$write("CSRFILE : Read Operation : Addr:%h", read_csr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d7 ||
	   TASK_testplusargs___d8 && TASK_testplusargs___d9))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d13 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d14 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  TASK_testplusargs___d15 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr)
	begin
	  v__h1543 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d13 ||
	   TASK_testplusargs___d14 && TASK_testplusargs___d15))
	$write("[%10d", v__h1543, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d13 ||
	   TASK_testplusargs___d14 && TASK_testplusargs___d15))
	$write("CSRFILE : Read Operation : Addr:%h Data:%h",
	       read_csr_addr,
	       _theResult_____2__h1476);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_read_csr &&
	  (TASK_testplusargs___d13 ||
	   TASK_testplusargs___d14 && TASK_testplusargs___d15))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  TASK_testplusargs___d122 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  TASK_testplusargs___d123 = $test$plusargs("mcsr");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  TASK_testplusargs___d124 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr)
	begin
	  v__h2042 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr &&
	  (TASK_testplusargs___d122 ||
	   TASK_testplusargs___d123 && TASK_testplusargs___d124))
	$write("[%10d", v__h2042, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr &&
	  (TASK_testplusargs___d122 ||
	   TASK_testplusargs___d123 && TASK_testplusargs___d124))
	$write("CSRFILE : Write Operation : Addr:%h, word:%h",
	       write_csr_addr,
	       write_csr_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr &&
	  (TASK_testplusargs___d122 ||
	   TASK_testplusargs___d123 && TASK_testplusargs___d124))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkcsrfile

